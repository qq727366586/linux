#kubectl explain pod

#版本号
apiVersion: v1    
#资源类型 
kind: pod         
#元数据
metadata:         
  name: pod-base
  namespace: dev
  labels:
    version: 1.0
#详细信息
spec:
  #容器列表,用于定义容器的详细信息<[]Object>
  containers:
  #容器名称
  - name: nginx
    #镜像
    image: nginx-1.17.1
    # Always 总是从远程仓库拉取
    # IfNotPresent 本地有则使用本地镜像 没有从远程仓库拉取
    # Never 只是用本地镜像,没有就报错
    imagePolicy: Always
    #命令 command > args 会覆盖dockerfile的 entrypoints
    command: ["/bin/bash", "-c", "touch /tmp/hello.txt; while true; do /bin/echo $(date + %T) >> /tmp/hello.txt sleep 10; done;"]
    args: ["/bin/bash", "-c", "touch /tmp/hello.txt; while true; do /bin/echo ljy >> /tmp/hello.txt sleep 10; done;"]
    #环境变量
    env:
    - name: "username"
      value: "admin"
    - name: "password"
      value: "admin"
    #端口
    ports:
      #端口名称 如果指定 必须是pod中唯一的
    - name: nignx-port
      #监听的端号
      containerPort: 80
      #容器要在主机上公开的端口 如果设置 主机只能运行一个容器的副本
      #hostPort:
      #要将外部端口绑定到的主机ip
      #hostIP:
      #端口协议 必须是UDP TCP STCP 默认 TCP
      protocol: TCP
    #容器占用的资源配置
    resources:
      #限制资源上限 超过 会终止 并 重启
      limits:
        cpu: "2"
        memory: "10Gi" 
      #限制资源下限 不够 会无法启动
      requests:
        cpu: "1"
        memory: "10Mi"
  #初始化容器
  initContainers:
  - name: test-mysql
    image: busybox:1.30
    command: ['sh', '-c', 'until ping 192.168.40.111 -c 1; do echo waiting mysql...; sleep 2; done;']
  - name: test-redis
    image: busybox:1.30
    command: ['sh', '-c', 'until ping 192.168.40.112 -c 1; do echo waiting redis...; sleep 2; done;']
    #生命周期
    lifecycle:
      #pod start 容器启动后钩子事件
      podStart:
        exec: ['/bin/sh', '-c', 'echo podStart...']
      #pod stop 容器结束前钩子事件
      preStop:
        exec: ['/bin/sh', '-c', 'echo podEnd...']
    #存活性探针 如果失败 则会重启
    livenessProbe:
      tcpSocket:
        port: 8080
    #就绪型探针 试探的询问是否可以将请求流量转发到这个pod
    readiness:
      #生命周期 子选项更多的配置
      #容器启动多少秒执行一次探测
      initialDelaySeconds: 1
      #探测超时时间 默认1s 最小1s
      timeoutSeconds: 1
      #执行探测的频率 默认10s 最小1s
      periodSeconds: 10
      #连续探测失败多少次 才被认定失败 默认是3 最小值是1
      failureThreshold: 3
      #连续探测成功多少次 才被认定成功 默认是1 
      successThreshold: 1
      httpGet:
        scheme: HTTP
        port: 80
        host: "http:www.baidu.com"
        path: /hello
  #亲和性设置
  affinity: 
    #设置node亲和性
    nodeAffinity:
      #硬限制
      requireDuringSchedulingIngnoredDuringExecution:
        #节点选择项
        nodeSelectorTerms:
          #匹配env的值在['xxx', 'yyy']中的标签
        - matchExpressions:
          - key: nodeenv
            operator: In
            values: ['xxx', 'yyy']
      #软限制
      preferredDuringSchedulingIgnoredDuringExecution:
        #权重
      - weight: 1
        preference:
          #匹配env的值在['xxx', 'yyy']中的标签
          matchExpressions:
          - key: nodeenv
            operator: In
            values: ['xxx', 'yyy']
    #设置pod亲和性
    podAffinity:
      #硬限制
      requireDuringSchedulingIngnoredDuringExecution:
        #标签选择
      - labelSelector:
          matchExpressions:
          - key: podenv
            operator: In
            values: ['xxx', 'yyy']
          #指定调度时的作用域 kubernets.io/hostname 就是以node节点为区分范围 beta.kubernets.io/os 以node节点的操作系统类型区分
          topologyKey: kubernets.io/hostname
    #设置pod反亲和性
    podAntiAffinity:
      requireDuringSchedulingIngnoredDuringExecution:
      - labelSelector:
          #匹配env的值在['xxx', 'yyy']中的标签
          matchExpressions:
          - key: nodeenv
            operator: In
            values: ['xxx', 'yyy']
        topologyKey: kubernets.io/hostname
    #设置容忍
    tolerations:
    - key: "tag"
      operator: "Equal"
      value: "test"
      #添加容忍的规则 为空代表容忍所有
      effect: "NoExecute"
 #busybox------------------------------------------------------------------------------------------------------------------------
  - name: busybox
    image: busybox:1.30
    command: ["/bin/bash", "-c", "touch /tmp/hello.txt; while true; do /bin/echo $(date + %T) >> /tmp/hello.txt sleep 10; done;"]
  #根据nodeName的值将pod导读到指定的Node上<string>
  nodeName:
  #根据NodeSelector中定义的信息选择将该pod调度到包含这些label的Node上<[]map>
  nodeSelector:
  #是否使用主机模式,默认为false,如果设置true,表示使用宿主机<boolean>
  hostNetwork:
  #存储卷,用于定义在pod上面挂载的存储信息<[]object>
  volumes:
#重启策略,表示pod在遇到故障的时候处理策略<string>
restartPolicy: Always

